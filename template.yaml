AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy final project

Parameters:
  AvailabilityZoneA: 
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "us-east-1a"
  AvailabilityZoneB: 
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "us-east-1b"
  WebInstanceType:
    Type: String
    Default: t2.large
    Description: Default Web Tier is t2.large.
  AppInstanceType:
    Type: String
    Default: r3.2xlarge
    Description: Default Application Tier is r3.2xlarge.
  InstanceCount:
    Type: Number
    Default: 5
    Description: Number of EC2 instances to launch

Mappings:
  AWSInstanceType2Arch:
    "t2.large":
      "Arch": "64"
    "r3.2xlarge":
      "Arch": "64"
  AWSRegionArch2AMI:
    "us-west-1":
      "64" : "ami-b18ed2f4"
    "us-east-1":
      "64" : "ami-e965ba80"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16 
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: Project VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: Project Internet Gateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC 
      InternetGatewayId: !Ref InternetGateway 

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Public Subnet 2 
        
  PublicRouteTable: 
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref "PublicSubnet1"
      RouteTableId: !Ref "PublicRouteTable"

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref "PublicSubnet2"
      RouteTableId: !Ref "PublicRouteTable"
      
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
        
  InboundHTTPPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
      PortRange: 
        From: "80" 
        To: "80"

  InboundResponsePortsPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '101'
      Protocol: "6"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
      PortRange: 
        From: "1024" 
        To: "65535"
          
  OutBoundHTTPPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref "PublicNetworkAcl"
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
      PortRange: 
        From: "80" 
        To: "80"

  OutBoundResponsePortsPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '101'
      Protocol: "6"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
      PortRange: 
        From: "1024" 
        To: "65535"
          
  PublicSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref "PublicSubnet1"
      NetworkAclId: !Ref "PublicNetworkAcl"
      
  PublicSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref "PublicSubnet2"
      NetworkAclId: !Ref "PublicNetworkAcl"
          
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Private Subnet 2 
          
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Private Subnet 3 

  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Private Subnet 4

  PrivateSubnet5:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.6.0/24
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Private Subnet 5 
          
  PrivateSubnet6:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.7.0/24
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Private Subnet 6 

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Route Table

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref "PrivateSubnet1"
      RouteTableId: !Ref "PrivateRouteTable"
      
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref "PrivateSubnet2"
      RouteTableId: !Ref "PrivateRouteTable"
  
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref "PrivateSubnet3"
      RouteTableId: !Ref "PrivateRouteTable"

  PrivateSubnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref "PrivateSubnet4"
      RouteTableId: !Ref "PrivateRouteTable"
      
  PrivateSubnet5RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref "PrivateSubnet5"
      RouteTableId: !Ref "PrivateRouteTable"
  
  PrivateSubnet6RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref "PrivateSubnet6"
      RouteTableId: !Ref "PrivateRouteTable"
  
  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC

  InboundPrivateNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
      PortRange: 
        From: "0" 
        To: "65535"

  OutBoundPrivateNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
      PortRange: 
        From: "0" 
        To: "65535"      

  PrivateSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref "PrivateSubnet1"
      NetworkAclId: !Ref "PublicNetworkAcl"
      
  PrivateSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref "PrivateSubnet2"
      NetworkAclId: !Ref "PublicNetworkAcl"
      
  PrivateSubnet3NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref "PrivateSubnet3"
      NetworkAclId: !Ref "PublicNetworkAcl"

  PrivateSubnet4NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref "PrivateSubnet4"
      NetworkAclId: !Ref "PublicNetworkAcl"
      
  PrivateSubnet5NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref "PrivateSubnet5"
      NetworkAclId: !Ref "PublicNetworkAcl"
      
  PrivateSubnet6NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref "PrivateSubnet6"
      NetworkAclId: !Ref "PublicNetworkAcl"
  
  PublicElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      SecurityGroups: 
        - !Ref WebLoadBalancerSecurityGroup
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Listeners: 
      - LoadBalancerPort: "80"
        InstancePort: "80"
        Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '90'
        Timeout: '60'

  WebLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access on port 80
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0

  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        - !Ref AvailabilityZoneA
        - !Ref AvailabilityZoneB
      VPCZoneIdentifier: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchConfigurationName: !Ref "WebTierLaunchConfig"
      MinSize: "4"
      MaxSize: "12"
      DesiredCapacity: !Ref InstanceCount
      LoadBalancerNames: 
        - !Ref PublicElasticLoadBalancer
      Tags:
        - Key: Name
          Value: web-tier
          PropagateAtLaunch: true

  WebTierLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: 
        Fn::FindInMap:
          - "AWSRegionArch2AMI"
          - Ref: "AWS::Region"
          - Fn::FindInMap:
              - "AWSInstanceType2Arch"
              - Ref: "WebInstanceType"
              - "Arch"
      UserData:
        Fn::Base64: "80"
      SecurityGroups: 
        - !Ref "WebInstanceSecurityGroup"
      InstanceType: !Ref "WebInstanceType"

  WebInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access on the configured port
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          SourceSecurityGroupId: !Ref WebLoadBalancerSecurityGroup
          
  PrivateElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      SecurityGroups: 
        - !Ref AppLoadBalancerSecurityGroup
      Subnets: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Listeners: 
      - LoadBalancerPort: "80"
        InstancePort: "80"
        Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '90'
        Timeout: '60'         
        
  AppLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access on port 80
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0

  AppServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        - !Ref AvailabilityZoneA
        - !Ref AvailabilityZoneB
      VPCZoneIdentifier: 
        - !Ref PrivateSubnet3
        - !Ref PrivateSubnet4
      LaunchConfigurationName:  !Ref "AppTierLaunchConfig"
      MinSize: "5"
      MaxSize: "5"
      DesiredCapacity: !Ref InstanceCount
      LoadBalancerNames: 
        - !Ref "PrivateElasticLoadBalancer"
      Tags:
        - Key: Name
          Value: app-tier
          PropagateAtLaunch: true

  AppTierLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: 
        Fn::FindInMap:
          - "AWSRegionArch2AMI"
          - Ref: "AWS::Region"
          - Fn::FindInMap:
              - "AWSInstanceType2Arch"
              - Ref: "AppInstanceType"
              - "Arch"
      UserData:
        Fn::Base64: "80"
      SecurityGroups: 
        - !Ref "AppInstanceSecurityGroup"
      InstanceType: !Ref "AppInstanceType"

  AppInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access on the configured port
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          SourceSecurityGroupId: !Ref AppLoadBalancerSecurityGroup

  AppServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: "PercentChangeInCapacity"
      AutoScalingGroupName: !Ref "AppServerGroup"
      Cooldown: "300"
      ScalingAdjustment: 100
    
  AppServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref "AppServerGroup"
      Cooldown: "600"
      ScalingAdjustment: -1

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmDescription: "Scale-up if CPU > 60% for 10 minutes"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: "120"
      EvaluationPeriods: "5"
      Threshold: "40"
      AlarmActions: 
        - !Ref "AppServerScaleUpPolicy"
      Dimensions:
        - Name: "AutoScalingGroupName"
          Value: !Ref "AppServerGroup" 
      ComparisonOperator: "GreaterThanThreshold"

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmDescription: "Scale-down if CPU < 50% for 60 min"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: "120"
      EvaluationPeriods: "30"
      Threshold: "20"
      AlarmActions: 
        - !Ref "AppServerScaleDownPolicy"
      Dimensions:
        - Name: "AutoScalingGroupName"
          Value: !Ref "AppServerGroup"
      ComparisonOperator: "LessThanThreshold"         
          
Outputs:
  VPC:
    Description: VPC
    Value: !Ref VPC
  AZ1:
    Description: Availability Zone 1
    Value: !GetAtt 
      - PublicSubnet1
      - AvailabilityZone
  AZ1:
    Description: Availability Zone 2
    Value: !GetAtt 
      - PublicSubnet2
      - AvailabilityZone
